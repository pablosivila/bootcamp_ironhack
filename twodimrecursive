def twodimrecursive(mat, verbose=True):
    def depth(mat):        
        checks = []
        depths = []
        
        # checks will contain each mat's element type
        # It will represent the 'end condition' for the recursion.
        # When it is the case that it doesn't have any more lists. Then we'll stop.
        for item in mat:
            checks.append(type(item) == list)
        
        # First, the 'end condition':
        if not any(checks):
            return 1 # the depth of a non-list item
        
        else: 
            # if you have remaining lists:
            # start by filtering the ones you have.
            filtered_lists = list(filter(lambda x: type(x) == list, 
                                         mat))
            
            for item in filtered_lists:
                # calculate the max_depth of that list:
                depths.append(depth(item))
                
            max_depth = max(depths)
            
            # accumulate the depth obtained
            return 1 + max_depth
                    
    return depth(mat)

print(twodimrecursive([[1,2], [1,2,3]]))